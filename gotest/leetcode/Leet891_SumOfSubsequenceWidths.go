package main

import (
	"fmt"
	"sort"
)

// https://leetcode.com/problems/sum-of-subsequence-widths/

// Given an array of integers A, consider all non-empty subsequences of A.
// For any sequence S, let the width of S be the difference between the maximum and minimum element of S.
// Return the sum of the widths of all subsequences of A. 
// As the answer may be very large, return the answer modulo 10^9 + 7.
// Example 1:
//   Input: [2,1,3]
//   Output: 6
//   Explanation:
//      Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
//      The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
//      The sum of these widths is 6.
// Note:
//   1 <= A.length <= 20000
//   1 <= A[i] <= 20000

// for example, if the array is [1,2,4,7,14], the difference between adjacent numbers are [1,2,3,7].
// we want the overall width sum. we have 15 subsequnces that contain the difference between [1,2].
// we have 3 non-empty subsequences of [1,2], 7 non-empty subsequences of [4,7,14], thus,
// 3*7=21 subsequnces will contain the difference between [2,4], so we add (4-2)*21 in the overall sum. 
func sumSubseqWidths(A []int) int {
	// sort the array first
	sort.Sort(sort.IntSlice(A))
	n := len(A)
	pow2 := make([]int, n)  // pow2[i] = (2^i)-1 mod 1e9+7
	p := 1
	mod := int(1e9+7)
	for i:=1; i<n; i++ {
		p = (p*2)%mod
		pow2[i] = p-1
	}
	allsum := 0
	for i:=1; i<n; i++ {
		diff := A[i]-A[i-1]
		allsum += ((pow2[i]*pow2[n-i])%mod)*diff
		allsum = allsum % mod
	}
	return allsum
}

func main() {
	long := []int{722,396,948,994,586,282,935,43,168,778,247,467,645,528,167,605,789,301,570,991,631,292,
		902,115,621,500,416,340,194,428,381,826,79,339,180,905,134,778,144,732,810,777,666,349,390,689,
		567,833,669,299,476,591,18,12,709,59,450,263,6,547,718,875,806,368,435,79,882,302,352,145,334,702,
		304,866,230,406,579,878,747,440,457,374,5,725,71,287,64,750,388,272,56,174,954,215,274,92,752,888,
		987,825,196,911,431,619,417,639,882,185,487,882,306,588,189,551,48,444,425,130,103,840,958,605,
		154,954,239,163,182,545,162,505,701,137,598,781,575,53,286,2,994,407,533,572,880,105,492,622,330,
		736,536,623,866,9,308,229,455,925,652,569,502,165,968,376,623,718,119,32,795,958,269,701,527,164,
		210,936,694,287,964,89,119,30,903,910,682,828,606,474,865,128,661,649,851,612,164,364,655,49,899,
		909,214,26,379,575,609,450,691,923,979,839,629,903,412,616,266,102,113,651,591,220,519,506,665,394,
		509,157,924,705,960,144,891,264,333,331,813,741,112,587,862,579,641,437,429,582,618,553,367,721,759,
		110,834,962,824,344,335,529,489,834,1,972,885,473,639,549,902,275,738,898,334,258,727,313,586,537,
		98,357,759,731,92,526,145,892,69,694,90,115,92,78,596,868,225,611,722,303,382,720,982,706,395,414,
		44,584,744,493,336,693,323,684,312,703,357,861,60,5,782,29,871,367,419,782,331,870,78,808,957,719,
		501,913,782,947,976,176,846,214,994,152,70,873,131,186,557,182,602,325,303,72,146,119,193,518,30,
		982,879,679,191,498,950,994,955,773,943,900,885,701,767,894,447,717,324,328,603,435,72,227,918,636,
		968,870,954,119,274,52,719,101,328,312,897,669,360,724,116,507,639,63,252,2,934,595,965,371,305,90,
		4,469,713,941,710,329,27,169,23,572,612,377,538,348,458,32,737,907,485,697,973,719,736,194,148,863,
		353,960,448,512,926,49,986,995,411,219,417,784,863,296,545,718,545,584,24,28,420,698,486,264,296,
		973,592,329,31,576,52,709,556,175,216,246,681,304,842,649,72,457,762,127,176,789,655,667,119,165,
		713,468,738,570,991,699,849,766,876,895,773,574,642,754,716,419,831,427,592,20,403,638,77,72}
	fmt.Println(sumSubseqWidths([]int{3}), 0)
	fmt.Println(sumSubseqWidths([]int{3,7}), 4)			
	fmt.Println(sumSubseqWidths([]int{2,1,3}), 6)
	fmt.Println(sumSubseqWidths([]int{1,2,4,7,14}), 225)	
	fmt.Println(sumSubseqWidths([]int{1,45,684,9857,34,9,2888,7750,12345,4321,3798,325,9999,20000,
		19996,18888,17773,8765,12456,1,2790,7754,882,69}), 784210784)
	fmt.Println(sumSubseqWidths(long), 367868228)
}