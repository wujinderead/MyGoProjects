package cipher

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"fmt"
	"testing"
)

var commonInput = []byte{
	0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
}

var commonKey128 = []byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}

var commonKey192 = []byte{
	0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
	0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
}

var commonKey256 = []byte{
	0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
	0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4,
}

var commonIV = []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}

var str = "平时喜欢在电影天堂下载一些电影看，然后发现有一些电影是mkv格式的，然后什么爱奇艺、" +
	"暴风影音之类的播放器都播放不了，各种百度结果是让我下载什么MXPlayer，记不住了，反正各种，" +
	"但是各种用不了，各种不好使，让我一度很苦恼，mac到底怎么样才能看mkv格式的电影啊[抓狂]！"

func Test_Aes(t *testing.T) {
	test_Aes(t, 128)
	test_Aes(t, 192)
	test_Aes(t, 256)
}

func test_Aes(t *testing.T, keysize int) {
	// generate key, iv
	reader := rand.Reader
	key := make([]byte, keysize/8)
	blockSize := aes.BlockSize
	iv := make([]byte, blockSize)
	_, err := reader.Read(key)
	_, err = reader.Read(iv)
	if err != nil {
		t.Error("error generate key, iv.")
		t.Fail()
	}
	fmt.Printf("key size: %d, secret: %x\n", keysize, key)
	fmt.Printf("iv: %x\n", iv)

	// generate cipher
	aesCipher, err := aes.NewCipher(key)
	if err != nil {
		t.Error("error generate cipher.")
		t.Fail()
	}

	// process data
	data := []byte(str)
	var length int
	if len(data)%blockSize == 0 {
		length = len(data)
	} else {
		length = len(data) + blockSize - len(data)%blockSize
	}
	fmt.Printf("data: %x\n", data)

	// generate cbc encrypter
	aesCbcEncypter := cipher.NewCBCEncrypter(aesCipher, iv)
	encd := make([]byte, length)
	copy(encd, data)
	aesCbcEncypter.CryptBlocks(encd, encd)
	fmt.Printf("cbcE: %x\n", encd)

	// generate cbc decrypter
	aesCbcDec := cipher.NewCBCDecrypter(aesCipher, iv)
	decd := make([]byte, len(encd))
	aesCbcDec.CryptBlocks(decd, encd)
	fmt.Printf("cbcD: %x\n", decd)
}
